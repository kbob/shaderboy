#!/usr/bin/env python3

import sys
import time

import numpy as np
import PIL.Image

import shade


LEDS_WIDTH = 6 * 64
LEDS_HEIGHT = 64

vertex_shader_source = '''
    attribute vec3 vert;
    
    void main(void) {
        gl_Position = vec4(vert, 1.0);
    }
'''

fragment_shader_source = '''
    uniform float iTime;
    uniform vec3 iResolution;
    uniform sampler2D face;

    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        // Normalized pixel coordinates (from 0 to 1)
        vec2 uv = fragCoord/iResolution.xy;
        vec2 uv6 = uv * vec2(6.0, 1.0);

        // Time varying pixel color
        vec3 col = 0.5 + 0.5*cos(iTime + uv6.xyx+vec3(0,2,4));
        vec3 c2 = texture2D(face, uv6 + iTime * 0.1).rgb;
        c2 = c2 * c2;
        col *= c2;

        // Output to screen
        fragColor = vec4(col, 1.0);
    }

    void main() {
        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
        mainImage(gl_FragColor, gl_FragCoord.xy);
        gl_FragColor.a = 1.0;
    }
'''


def load_image(path):
    img = PIL.Image.open(path)
    mode = img.mode
    if mode != 'RGBA':
        exit('{} has unsupported mode {}'.format(path, mode))
    a = np.array(img)
    return (img.width, img.height, a.tobytes())

img = load_image('smiley.png')

shade.init(LEDS_WIDTH, LEDS_HEIGHT)

prog = shade.Prog()
prog.attach_shader(shade.ShaderType.VERTEX, vertex_shader_source)
prog.attach_shader(shade.ShaderType.FRAGMENT, fragment_shader_source)
prog.attach_predefined('iResolution', shade.Predefined.RESOLUTION)
prog.attach_predefined('iTime', shade.Predefined.PLAY_TIME)
prog.attach_image('face', *img)
prog.check_okay()
prog.make_current()

shade.start()

for i in range(60):
    try:
        time.sleep(1)
        print('FPS: {:.3}'.format(shade.fps()))
    except KeyboardInterrupt:
        print()
        break

shade.stop()

del prog
shade.deinit()
