#!/usr/bin/env python3

import ctypes
from ctypes import byref, c_char, c_char_p, c_double, c_int, c_void_p, POINTER
import numpy as np
import PIL.Image
import time

vertex_shader_source = '''
    attribute vec3 vert;
    
    void main(void) {
        gl_Position = vec4(vert, 1.0);
    }
'''

fragment_shader_source = '''
    uniform float iTime;
    uniform vec3 iResolution;
    uniform sampler2D noise_small;

    void mainImage( out vec4 fragColor, in vec2 fragCoord )
    {
        // Normalized pixel coordinates (from 0 to 1)
        vec2 uv = fragCoord/iResolution.xy;
        vec2 uv6 = uv * vec2(6.0, 1.0);

        // Time varying pixel color
        vec3 col = 0.5 + 0.5*cos(iTime + uv6.xyx+vec3(0,2,4));
        vec3 c2 = texture2D(noise_small, uv6 + iTime * 0.1).rgb;
        c2 = c2 * c2;
        col *= c2;

        // Output to screen
        fragColor = vec4(col, 1.0);
    }

    void main() {
        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);
        mainImage(gl_FragColor, gl_FragCoord.xy);
        gl_FragColor.a = 1.0;
    }
'''


def load_image(path):
    img = PIL.Image.open(path)
    mode = img.mode
    if mode != 'RGBA':
        exit('{} has unsupported mode {}'.format(path, mode))
    a = np.array(img)
    return (img.width, img.height, a.tobytes())

shade = ctypes.cdll.LoadLibrary('./libshade.so')

use_prog = shade.shd_use_prog
use_prog.argtypes = (c_void_p, )

create_prog = shade.shd_create_prog
create_prog.restype = c_void_p

destroy_prog = shade.shd_destroy_prog
destroy_prog.argtypes = (c_void_p, )

prog_is_okay = shade.shd_prog_is_okay
prog_is_okay.argtypes = (c_void_p, POINTER(c_char_p))

prog_attach_shader = shade.shd_prog_attach_shader
prog_attach_shader.argtypes = (c_void_p, c_int, c_char_p)

prog_attach_image = shade.shd_prog_attach_image
prog_attach_image.argtypes = (c_void_p, c_char_p, c_int, c_int, c_char_p)

prog_attach_predefined = shade.shd_prog_attach_predefined
prog_attach_predefined.argtypes = (c_void_p, c_char_p, c_int)

fps = shade.shd_fps
fps.argtypes = ()
fps.restype = c_double

VERT = c_int.in_dll(shade, 'SHD_SHADER_VERTEX_VALUE')
FRAG = c_int.in_dll(shade, 'SHD_SHADER_FRAGMENT_VALUE')

RESOLUTION = c_int.in_dll(shade, 'SHD_PREDEFINED_RESOLUTION_VALUE')
PLAY_TIME = c_int.in_dll(shade, 'SHD_PREDEFINED_PLAY_TIME_VALUE')
NOISE_SMALL = c_int.in_dll(shade, 'SHD_PREDEFINED_NOISE_SMALL_VALUE')
NOISE_MEDIUM = c_int.in_dll(shade, 'SHD_PREDEFINED_NOISE_MEDIUM_VALUE')

LEDS_WIDTH = 6 * 64
LEDS_HEIGHT = 64

img = load_image('test.png')

shade.shd_init(LEDS_WIDTH, LEDS_HEIGHT)

prog = create_prog()
prog_attach_shader(prog, VERT, vertex_shader_source.encode('ascii'))
prog_attach_shader(prog, FRAG, fragment_shader_source.encode('ascii'))
prog_attach_predefined(prog, b'iResolution', RESOLUTION)
prog_attach_predefined(prog, b'iTime', PLAY_TIME)
prog_attach_image(prog, b'noise_small', *img)
info_log = c_char_p();
if not shade.shd_prog_is_okay(prog, byref(info_log)):
    print(info_log.value.decode('ascii'))
    exit()
shade.shd_use_prog(prog)

shade.shd_start()

for i in range(60):
    try:
        time.sleep(1)
        print('FPS: {:.3}'.format(fps()))
    except KeyboardInterrupt:
        print()
        break

shade.shd_stop()
destroy_prog(prog)
shade.shd_deinit()
